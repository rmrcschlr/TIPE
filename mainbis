from numpy import *

### Réseau avec 2 lignes et 1 correspondance

liste = ['T1,0', 'T1,1', 'T2,0', 'T2,1', 'C']

matrice = []
for i in range(4) :
    matrice.append((i * [-1]) + [0] + ((3 - i) * [-1]))
matrice[0].append(1)
matrice[1].append(2)
matrice[2].append(3)
matrice[3].append(4)
matrice.append([1, 2, 3, 4, 0])

RESEAU = Reseau(liste, matrice)

RESEAU.ajouter_ligne('L1', ['T1,0', 'C', 'T1,1'], ['T1,0', 'T1,1'])
RESEAU.ajouter_ligne('L2', ['T2,0', 'C', 'T2,1'], ['T2,0', 'T2,1'])

FREQUENCES = Frequences(RESEAU)
FREQUENCES.ajouter_frequence(0, 0, 59, 5)
FREQUENCES.ajouter_frequence(1, 0, 59, 5)
"""
### Réseau avec 3 lignes et 2 correspondances

liste = ['T1,0', 'T1,1', 'T2,0', 'T2,1', 'T3,0', 'T3,1', 'C1,2', 'C1,3']

matrice = []
for i in range(6) :
    matrice.append((i * [-1]) + [0] + ((5 - i) * [-1]))
matrice[0].append(1)
matrice[0].append(-1)
matrice[1].append(-1)
matrice[1].append(2)
matrice[2].append(3)
matrice[2].append(-1)
matrice[3].append(4)
matrice[3].append(-1)
matrice[4].append(-1)
matrice[4].append(5)
matrice[5].append(-1)
matrice[5].append(6)
matrice.append([1, -1, 3, 4, -1, -1, 0, 7])
matrice.append([-1, 2, -1, -1, 5, 6, 7, 0])

RESEAU = Reseau(liste, matrice)

RESEAU.ajouter_ligne('L1', ['T1,0', 'C1,2', 'C1,3', 'T1,1'], ['T1,0', 'T1,1'])
RESEAU.ajouter_ligne('L2', ['T2,0', 'C1,2', 'T2,1'], ['T2,0', 'T2,1'])
RESEAU.ajouter_ligne('L3', ['T3,0', 'C2,3', 'T3,1'], ['T3,0', 'T3,1'])

FREQUENCES = Frequences(RESEAU)
FREQUENCES.ajouter_frequence(0, 0, 59, 5)
FREQUENCES.ajouter_frequence(1, 0, 59, 5)
FREQUENCES.ajouter_frequence(2, 0, 59, 5)

### Réseau avec 3 lignes et 3 correspondances

liste = ['T1,0', 'T1,1', 'T2,0', 'T2,1', 'T3,0', 'T3,1', 'C1,2', 'C1,3', 'C2,3']

matrice = []
for i in range(6) :
    matrice.append((i * [-1]) + [0] + ((5 - i) * [-1]))
matrice[0].append(1)
matrice[0].append(-1)
matrice[0].append(-1)
matrice[1].append(-1)
matrice[1].append(2)
matrice[1].append(-1)
matrice[2].append(3)
matrice[2].append(-1)
matrice[2].append(-1)
matrice[3].append(-1)
matrice[3].append(-1)
matrice[3].append(4)
matrice[4].append(-1)
matrice[4].append(5)
matrice[4].append(-1)
matrice[5].append(-1)
matrice[5].append(-1)
matrice[5].append(6)

matrice.append([1, -1, 3, -1, -1, -1, 0, 7, 8])
matrice.append([-1, 2, -1, -1, 5, -1, 7, 0, 9])
matrice.append([-1, -1, -1, 4, -1, 6, 8, 9, 0])

RESEAU = Reseau(liste, matrice)

RESEAU.ajouter_ligne('L1', ['T1,0', 'C1,2', 'C1,3', 'T1,1'], ['T1,0', 'T1,1'])
RESEAU.ajouter_ligne('L2', ['T2,0', 'C1,2', 'C2,3', 'T2,1'], ['T2,0', 'T2,1'])
RESEAU.ajouter_ligne('L3', ['T3,0', 'C2,3', 'C1,3', 'T3,1'], ['T3,0', 'T3,1'])

FREQUENCES = Frequences(RESEAU)
FREQUENCES.ajouter_frequence(0, 0, 59, 5)
FREQUENCES.ajouter_frequence(1, 0, 59, 5)
FREQUENCES.ajouter_frequence(2, 0, 59, 5)
"""

Problem = CSP()

###Rentre les variables et leur domaine dans le CSP
for indice_ligne in range(len(RESEAU.liste_lignes)) :
    for terminus in RESEAU.ligne_terminus(indice_ligne) :
        compteur = 0
        depart = FREQUENCES.freq_ligne(indice_ligne)[0][0]
        intervalle = (FREQUENCES.freq_ligne(indice_ligne)[0][2] // 10) + 1
        domaine = arange(depart, intervalle + 1)
        Problem.ajoute_variable(RESEAU.nom_ligne(indice_ligne) + "," + RESEAU.nom_arret(terminus) + ',' + str(compteur), domaine)
        compteur += 1
        suivant = FREQUENCES.prochain_depart(indice_ligne, depart)
        while suivant != [-1, -1] :
            depart = depart + suivant[0]
            minimum = min(domaine + suivant[0]) - suivant[1]
            maximum = max(domaine + suivant[0]) + suivant[1]
            domaine = arange(minimum, maximum + 1)
            Problem.ajoute_variable(RESEAU.nom_ligne(indice_ligne) + "," + RESEAU.nom_arret(terminus) + ',' + str(compteur), domaine)
            Problem.ajoute_contrainte(lambda a, b, ecart = suivant[0], intervalle = suivant[1] : abs(b - ecart - a) <= intervalle, (RESEAU.nom_ligne(indice_ligne) + "," + RESEAU.nom_arret(terminus) + ',' + str(compteur - 1), RESEAU.nom_ligne(indice_ligne) + "," + RESEAU.nom_arret(terminus) + ',' + str(compteur)))
            compteur +=1
            suivant = FREQUENCES.prochain_depart(indice_ligne, depart)

### Résout le CSP sans critere
Solution_sans_critere = solution_par_anticipation(Problem)

### Résout le CSP avec critere
critere_max = 0
for indice_ligne in range(FREQUENCES.liste) :
    for freq in range(len(REQUENCES.freq_ligne(indice_ligne))) :
        if FREQUENCES.freq_ligne(indice_ligne)[freq][2] > critere_max :
            critere_max = FREQUENCES.freq_ligne(indice_ligne)[freq][2]

solution_trouvee = False
critere = 0
while not(solution_trouvee) :
    critere += 1
    for indice_arret in range(len(RESEAU.matrice_segments)) :
        ligne_contenant_arret = []
        for indice_ligne in range(len(RESEAU.liste_lignes)) :
            if indice_arret in RESEAU.ligne_arrets(indice_ligne) :
                ligne_contenant_arret.append(indice_ligne)
        liste_variables_arret = []
        for variable in Problem.noms() :
            if variable.split(',')[0] in ligne_contenant_arret :
                liste_variable_arret.append(variable)
    
#rajouter les contraintes pour un critere (faire une boucle for)
#à chaque arret, lier les horaire avec celui suivant

### Affiche la solution dans une liste
Solution = Solution_sans_critere
if Solution[0] :
    result = []
    for indice_ligne in range(len(RESEAU.liste_lignes)) :
        result.append([RESEAU.nom_ligne(indice_ligne)])
        for terminus in RESEAU.ligne_terminus(indice_ligne) :
            result[-1].append([RESEAU.nom_arret(terminus)])
            compteur = 0
            while RESEAU.nom_ligne(indice_ligne) + "," + RESEAU.nom_arret(terminus) + ',' + str(compteur) in Solution[1] :
                result[-1][-1].append(Solution[1][RESEAU.nom_ligne(indice_ligne) + "," + RESEAU.nom_arret(terminus) + ',' + str(compteur)])
                compteur += 1
print(result)
